package accountsettings

import "app.pacuare.dev/components/drawer"
import "app.pacuare.dev/components/icon"
import "app.pacuare.dev/components/badge"
import "app.pacuare.dev/components/button"
import "app.pacuare.dev/components/card"
import "app.pacuare.dev/components/modal"
import "app.pacuare.dev/components/tooltip"
import "app.pacuare.dev/components/spinner"
import "context"
import "app.pacuare.dev/components/alert"
import "app.pacuare.dev/components/input"
import "app.pacuare.dev/shared/db"
import . "github.com/icza/gox/gox"

templ AccountSettings(email string, fullAccess bool, returnedApiKey string, triggerProps drawer.TriggerProps) {
    <div x-data="accountSettings" class="flex items-stretch justify-stretch">
        @drawer.Drawer() {
            @drawer.Trigger(triggerProps) {
                {children...}
            }
            @drawer.Content(drawer.ContentProps{Position: drawer.PositionRight}) {
                @drawer.Header() {
                    @drawer.Title() {
                        Account Settings
                    }
                    @drawer.Description() {
                        {email}
                        @badge.Badge(badge.Props{
                            Variant: If(fullAccess, badge.VariantDestructive, badge.VariantOutline),
                        }) {
                            if fullAccess {
                                @icon.ShieldAlert(icon.Props{Size: 12})
                                Full access
                            } else {
                                @icon.ShieldCheck(icon.Props{Size: 12})
                                Restricted access
                            }
                        }
                    }
                }

                <div class="flex flex-col gap-4">
                    if !fullAccess {
                        @card.Card() {
                            @card.Header() {
                                @card.Title() {
                                    Personal Database
                                }
                                @card.Description() {
                                    Keep your data in sync with the master copy.
                                }
                            }
                            @card.Content() {
                                <div class="flex flex-row gap-2">
                                    @modal.Trigger(modal.TriggerProps{
                                        ModalID: "confirm-refresh",
                                    }) {
                                        @tooltip.Tooltip() {
                                            @tooltip.Trigger(tooltip.TriggerProps{
                                                For: "refresh-tooltip",
                                            }) {
                                                @button.Button() {
                                                    Refresh Data
                                                }
                                            }
                                            @tooltip.Content(tooltip.ContentProps{
                                                ID: "refresh-tooltip",
                                            }) {
                                                Refresh the <code>pacuare_raw</code> table with the latest data.
                                            }
                                        }
                                    }
                                    
                                    @modal.Trigger(modal.TriggerProps{
                                        ModalID: "confirm-recreate",
                                    }) {
                                        @tooltip.Tooltip() {
                                            @tooltip.Trigger(tooltip.TriggerProps{
                                                For: "recreate-tooltip",
                                            }) {
                                                @button.Button(button.Props{Variant: button.VariantDestructive}) {
                                                    Recreate Database
                                                }
                                            }
                                            @tooltip.Content(tooltip.ContentProps{
                                                ID: "recreate-tooltip",
                                            }) {
                                                Delete and recreate your personal database.
                                            }
                                        }
                                    }
                                </div>
                            }
                        }
                    }

                    @card.Card() {
                        @card.Header() {
                            @card.Title() {
                                API Keys
                            }
                            @card.Description() {
                                Access your data from your own apps.
                            }
                        }
                        @card.Content(card.ContentProps{Class: "flex flex-col gap-3"}) {
                            if returnedApiKey != "" {
                                @alert.Alert() {
                                    Your new API key is <code>{returnedApiKey}</code>. Please keep track of it, as it will not be shown again. 
                                }
                            }
                            {{ keys, err := db.DB(ctx).Query(context.Background(), "select id, description, to_char(createdOn, 'YYYY-MM-DD') as createdOn from APIKeys where email = $1 order by createdOn asc", email) }}
                            if err != nil {
                                @alert.Alert(alert.Props{Variant: alert.VariantDestructive}) {Error fetching API keys}
                            } else {
                                @card.Card() {
                                    @card.Content(card.ContentProps{Class: "[>:not(:last-child)]:border-b flex flex-col gap-3"}) {
                                        {{ var (id int; description, createdOn string; anyKeys = false) }}
                                        for keys.Next() {
                                            {{ anyKeys = true }}
                                            {{ keys.Scan(&id, &description, &createdOn) }}
                                            <form class="flex flex-row justify-between items-center" action="/api/key/delete" method="post">
                                                <input type="hidden" name="id" value={id}>
                                                <p>{description}</p>
                                                <div class="flex flex-row gap-2 items-center">
                                                    <p>{createdOn}</p>
                                                    @button.Button(button.Props{Type: button.TypeSubmit, Size: button.SizeIcon, Variant: button.VariantGhost}) {
                                                        @icon.Trash(icon.Props{Size: 16})
                                                    }
                                                </div>
                                            </form>
                                        }
                                        if !anyKeys {
                                            No API keys.
                                        }
                                    }
                                }
                                <form class="flex flex-row gap-2" action="/api/key" method="post">
                                    @input.Input(input.Props{Placeholder: "Description", Name: "description"})
                                    @button.Button(button.Props{Type: button.TypeSubmit, Size: button.SizeIcon}) {
                                        @icon.Plus(icon.Props{Size: 16})
                                    }
                                </form>
                            }
                        }
                    }
                </div>

                @drawer.Footer() {
                    @button.Button(button.Props{
                        Variant: button.VariantDestructive,
                        Attributes: templ.Attributes{"title": "Log Out"},
                        Size: button.SizeIcon,
                        Href: "/auth/logout",
                    }) {
                        @icon.LogOut(icon.Props{Size: 16})
                    }
                }
            }
        }

        @modal.Modal(modal.Props{
            ID:    "confirm-refresh",
            Class: "max-w-md",
        }) {
            @modal.Header() {
                Refresh data?
            }
            @modal.Body() {
                This will clear any modifications you have made.
            }
            @modal.Footer() {
                <div class="flex gap-2">
                    @modal.Close(modal.CloseProps{
                        ModalID: "confirm-refresh",
                    }) {
                        @button.Button() {
                            Cancel
                        }
                    }
                    @modal.Close(modal.CloseProps{
                        ModalID: "confirm-refresh",
                    }) {
                        @button.Button(button.Props{
                            Variant: button.VariantSecondary,
                            Attributes: templ.Attributes{"x-bind": "refreshButton"},
                        }) {
                            Refresh
                        }
                    }
                </div>
            }
        }

        @modal.Modal(modal.Props{
            ID:    "confirm-recreate",
            Class: "max-w-md",
        }) {
            @modal.Header() {
                Are you absolutely sure?
            }
            @modal.Body() {
                This action cannot be undone. This will delete and recreate your database, removing any modifications, functions, procedures, views, or other structures you have created.
            }
            @modal.Footer() {
                <div class="flex gap-2">
                    @modal.Close(modal.CloseProps{
                        ModalID: "confirm-recreate",
                    }) {
                        @button.Button() {
                            Cancel
                        }
                    }
                    @modal.Close(modal.CloseProps{
                        ModalID: "confirm-recreate",
                    }) {
                        @button.Button(button.Props{
                            Variant: button.VariantSecondary,
                            Attributes: templ.Attributes{"x-bind": "recreateButton"},
                        }) {
                            Continue
                        }
                    }
                </div>
            }
        }

        <div class="absolute top-0 left-0 w-screen h-screen z-20 backdrop-blur-md bg-[var(--body-background-fill)]/50 items-center justify-center transition-all flex" :style="{'pointer-events': loading ? 'all' : 'none', 'opacity': loading ? 1 : 0, 'backdrop-filter': 'blur(10px)'}">
            @spinner.Spinner(spinner.Props{Size: spinner.SizeLg})
        </div>
    </div>
}