package templates

import "app.pacuare.dev/components/table"
import "app.pacuare.dev/components/card"
import "app.pacuare.dev/components/alert"
import "app.pacuare.dev/components/icon"
import "app.pacuare.dev/components/editor"
import "app.pacuare.dev/components/button"
import "app.pacuare.dev/components/accountsettings"
import "app.pacuare.dev/components/drawer"
import "app.pacuare.dev/components/docs"
import "app.pacuare.dev/components/tabs"
import . "github.com/icza/gox/gox"
import "embed"
import "github.com/charmbracelet/log"

//go:embed python
var python embed.FS

templ Index(email string, fullAccess bool, returnedApiKey string) {
	@layout("Pacuare Reserve") {
		<script type="module" crossorigin src="https://cdn.jsdelivr.net/npm/@gradio/lite/dist/lite.js"></script>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@gradio/lite/dist/lite.css" />
		<nav class="flex flex-row gap-3 p-3">
			@button.Button(button.Props{
				Variant: button.VariantOutline,
				Attributes: templ.Attributes{"title": "Show Documentation"},
				Class: "flex items-center justify-center h-full",
				Size: button.SizeIcon,
				ID: "open-docs",
			}) {
				@icon.Book(icon.Props{Size: 16, Class: "docs-icon-closed"})
				@icon.BookOpen(icon.Props{Size: 16, Class: "docs-icon-open hidden"})
			}
			@alert.Alert(alert.Props{
				Variant: If(fullAccess, alert.VariantDestructive, alert.VariantDefault), 
				Class: If(!fullAccess, "border-emerald-700 text-emerald-700", ""),
			}) {
				if fullAccess {
					@icon.ShieldAlert(icon.Props{Size: 18, Class: "block !top-5"})
					Full access
				} else {
					@icon.ShieldCheck(icon.Props{Size: 18, Class: "block !top-5"})
					Restricted access
				}
				- {email}
			}
			@accountsettings.AccountSettings(email, fullAccess, returnedApiKey, drawer.TriggerProps{
				Class: "flex items-stretch justify-stretch h-full",
			}) {
				@button.Button(button.Props{
					Variant: button.VariantOutline,
					Attributes: templ.Attributes{"title": "Account Settings"},
					Class: "flex items-center justify-center h-full",
					ID: "openSettings",
					Size: button.SizeIcon,
				}) {
					@icon.Settings(icon.Props{Size: 16})
				}
			}
		</nav>
		<div class="flex flex-1 flex-row justify-stretch gap-6 p-6 max-h-[calc(100%-(var(--spacing)*20))]">
			@docs.Docs("docs-sidebar")

			@tabs.Tabs(tabs.Props{
				ID: "language-tabs",
				Class: "w-full self-stretch pb-10",
			}) {
				@tabs.List(tabs.ListProps{
					Class: "w-full mb-4",
				}) {
					@tabs.Trigger(tabs.TriggerProps{
						Value: "sql",
						IsActive: true,
					}) { SQL }
					@tabs.Trigger(tabs.TriggerProps{
						Value: "python",
					}) { Python }
				}	
				@tabs.Content(tabs.ContentProps{
					Value: "sql",
					IsActive: true,
					Class: "flex w-full h-full",
				}) {
					<div class="grid grid-rows-1 grid-cols-2 gap-6 h-full max-h-full w-full max-w-full justify-self-stretch">
						@editor.Editor("query-editor")
						
						@card.Card(card.Props{Class: "flex flex-col items-stretch translate-0 box-border"}) {
							@alert.Alert(alert.Props{ID: "resultError", Class: "hidden m-2 w-[calc(100%-(var(--spacing)*4))]", Variant: alert.VariantDestructive})
							@table.Table(table.Props{ID: "resultsTable", Class: "h-full max-h-full max-w-full"})
							@button.Button(button.Props{
								Size: button.SizeIcon,
								ID: "exportCSV",
								Class: "fixed bottom-3 right-3 hidden",
								Attributes: templ.Attributes{"title": "Download results as CSV"},
							}) {
								@icon.FileDown(icon.Props{Size: 16})
							}
						}
					</div>
				}
				@tabs.Content(tabs.ContentProps{
					Value: "python",
					IsActive: true,
					Class: "flex flex-1 w-full h-full items-stretch justify-stretch self-stretch justify-self-stretch",
				}) {
					{{ queryPy, _ := python.ReadFile("python/query.py") }}
					{{ appPy, err := python.ReadFile("python/app.py") }}
					{{ if err != nil {log.Error(err)}}}
					<gradio-lite playground layout="horizontal" class="w-full">
						<gradio-file name="query.py">
							{ string(queryPy) }
						</gradio-file>
						{ string(appPy) }
					</gradio-lite>
				}
			}
		</div>
		<script src="/public/components/editor.js" type="module"></script>
		<script src="/public/js/index.js" type="module"></script>
	}
}
